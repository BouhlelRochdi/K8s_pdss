apiVersion: apps/v1
# Utilisez la version v1 du groupe d'API apps pour définir un objet Deployment.

kind: Deployment
# Cet objet est un Deployment, qui gère le déploiement d'applications dans Kubernetes.

metadata:
  name: mysql-deployment
# Métadonnées spécifiques au déploiement : nommez ce déploiement "mysql-deployment".

spec:
  selector:
    matchLabels:
      app: mysql
  # Sélectionnez les pods à gérer par ce déploiement en fonction des étiquettes "app: mysql".

  replicas: 1
  # Déployez une seule réplique (instance) de l'application.

  strategy:
    type: Recreate

  template:
    metadata:
      labels:
        app: mysql
    # Modèle pour les pods déployés par ce déploiement, étiquetés avec "app: mysql".

    spec:
      terminationGracePeriodSeconds: 10
      # Durée en secondes avant l'arrêt forcé du conteneur lors de la terminaison.

      containers:
        - name: mysql
          # Définition d'un conteneur nommé "mysql".

          # image: mcr.microsoft.com/mysql/server:2017-CU20-ubuntu-16.04
          image: mysql:8.0
          # Utilisation de l'image Docker spécifiée pour ce conteneur.

          # env:
          # - name: MYSQL_ROOT_PASSWORD
          #   valueFrom:
          #     secretKeyRef:
          #       name: mysql-secret
          #       key: password
          #     # Définition d'une variable d'environnement pour le mot de passe root MySQL.

          resources:
            limits:
              cpu: "2"
              memory: "3Gi"
            requests:
              cpu: "0.5"
          # Configuration des ressources (CPU et mémoire) demandées par le conteneur.

          ports:
            - containerPort: 3306
              # Le conteneur écoute sur le port 1433.

          env:
            - name: MYSQL_HOST
              value: "mysql"
            - name: MYSQL_USER
              value: "root"
            - name: MYSQL_PASSWORD
              value: "root"
          # Définition de variables d'environnement pour le conteneur.

          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/opt/mysql
          # Montage d'un volume nommé "mysql-persistent-storage" à /var/opt/mysql dans le conteneur.

      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
      # Définition d'un volume persistant qui est revendiqué à partir d'un PersistentVolumeClaim (PVC).

---
# Délimiteur pour séparer les différents objets Kubernetes.

apiVersion: v1
# Utilisez la version v1 du groupe d'API pour définir un objet Service.

kind: Service
# Cet objet est un Service, qui expose les pods à l'intérieur du cluster Kubernetes.

metadata:
  name: mysql-service
# Métadonnées spécifiques au service : nommez ce service "mysql-service".

spec:
  selector:
    app: mysql
  # Sélectionnez les pods à exposer via ce service en fonction des étiquettes "app: mysql".

  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
      nodePort: 3306 #30201
  # Définissez le port sur lequel le service écoute et le port sur lequel les pods cibles écoutent.

  type: NodePort
  # Type de service NodePort : expose le service sur un port spécifique sur chaque nœud du cluster.
